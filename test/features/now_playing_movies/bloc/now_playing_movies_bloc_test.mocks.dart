// Mocks generated by Mockito 5.3.0 from annotations
// in movies_app/test/features/now_playing_movies/bloc/now_playing_movies_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movies_app/core/network/base_pagination_response.dart' as _i2;
import 'package:movies_app/data/movie_repository/movie_remote_service.dart'
    as _i4;
import 'package:movies_app/data/movie_repository/movie_repository.dart' as _i7;
import 'package:movies_app/features/movie_detail/models/movie_detail_model.dart'
    as _i3;
import 'package:movies_app/features/now_playing_movies/models/movies_model.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBasePaginationResponse_0<T> extends _i1.SmartFake
    implements _i2.BasePaginationResponse<T> {
  _FakeBasePaginationResponse_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeMovieDetailModel_1 extends _i1.SmartFake
    implements _i3.MovieDetailModel {
  _FakeMovieDetailModel_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDateTime_2 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [MovieRemoteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteService extends _i1.Mock
    implements _i4.MovieRemoteService {
  MockMovieRemoteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.BasePaginationResponse<List<_i6.MovieModel>>>
      getNowPlayingMovies(int? page) => (super.noSuchMethod(
          Invocation.method(#getNowPlayingMovies, [page]),
          returnValue:
              _i5.Future<_i2.BasePaginationResponse<List<_i6.MovieModel>>>.value(
                  _FakeBasePaginationResponse_0<List<_i6.MovieModel>>(this,
                      Invocation.method(#getNowPlayingMovies, [page])))) as _i5
          .Future<_i2.BasePaginationResponse<List<_i6.MovieModel>>>);
  @override
  _i5.Future<_i3.MovieDetailModel> getMovieDetail(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [movieId]),
              returnValue: _i5.Future<_i3.MovieDetailModel>.value(
                  _FakeMovieDetailModel_1(
                      this, Invocation.method(#getMovieDetail, [movieId]))))
          as _i5.Future<_i3.MovieDetailModel>);
}

/// A class which mocks [IMovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIMovieRepository extends _i1.Mock implements _i7.IMovieRepository {
  MockIMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.MovieModel>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
              returnValue:
                  _i5.Future<List<_i6.MovieModel>>.value(<_i6.MovieModel>[]))
          as _i5.Future<List<_i6.MovieModel>>);
  @override
  _i5.Future<_i3.MovieDetailModel> getMovieDetail(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [movieId]),
              returnValue: _i5.Future<_i3.MovieDetailModel>.value(
                  _FakeMovieDetailModel_1(
                      this, Invocation.method(#getMovieDetail, [movieId]))))
          as _i5.Future<_i3.MovieDetailModel>);
}

/// A class which mocks [MovieModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieModel extends _i1.Mock implements _i6.MovieModel {
  MockMovieModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get adult =>
      (super.noSuchMethod(Invocation.getter(#adult), returnValue: false)
          as bool);
  @override
  String get overview =>
      (super.noSuchMethod(Invocation.getter(#overview), returnValue: '')
          as String);
  @override
  DateTime get releaseDate => (super.noSuchMethod(
          Invocation.getter(#releaseDate),
          returnValue: _FakeDateTime_2(this, Invocation.getter(#releaseDate)))
      as DateTime);
  @override
  List<int> get genreIds =>
      (super.noSuchMethod(Invocation.getter(#genreIds), returnValue: <int>[])
          as List<int>);
  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);
  @override
  String get originalTitle =>
      (super.noSuchMethod(Invocation.getter(#originalTitle), returnValue: '')
          as String);
  @override
  String get originalLanguage =>
      (super.noSuchMethod(Invocation.getter(#originalLanguage), returnValue: '')
          as String);
  @override
  String get title =>
      (super.noSuchMethod(Invocation.getter(#title), returnValue: '')
          as String);
  @override
  double get popularity =>
      (super.noSuchMethod(Invocation.getter(#popularity), returnValue: 0.0)
          as double);
  @override
  int get voteCount =>
      (super.noSuchMethod(Invocation.getter(#voteCount), returnValue: 0)
          as int);
  @override
  bool get video =>
      (super.noSuchMethod(Invocation.getter(#video), returnValue: false)
          as bool);
  @override
  double get voteAverage =>
      (super.noSuchMethod(Invocation.getter(#voteAverage), returnValue: 0.0)
          as double);
  @override
  String get fullImageUrl =>
      (super.noSuchMethod(Invocation.getter(#fullImageUrl), returnValue: '')
          as String);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}
